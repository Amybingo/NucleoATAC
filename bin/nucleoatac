#!/usr/bin/env python
"""
Script to run nucleoatac.
Various functions for calling nucleosomes using ATAC-Seq data.

Copyright (c) 2015, Alicia Schep <aschep@stanford.edu>

This code is free software; you can redistribute it and/or modify it under the terms
of the MIT License (see the file COPYING included with the distribution).

@author: Alicia Schep
@version: 0
@contact: aschep@stanford.edu
"""

###-----------Import modules---------------####

import sys
import argparse
from nucleoatac.Magic import *
import time

#from nucleoatac import occ, vprocess, nuc

def main():
    """The Main function for calling nucleoatac

    """
    #Parse options...
    parser = nucleoatac_parser()
    args = parser.parse_args()
    call = args.call
    if call == "occ":
        from nucleoatac.run_occ import run_occ
        print('---------Computing Occupancy and Nucleosomal Insert Distribution----------------')
        run_occ(args)
    elif call == "vprocess":
        from nucleoatac.run_vprocess import run_vprocess
        print('---------Processing VPlot-------------------------------------------------------')
        run_vprocess(args)
    elif call == "nuc":
        from nucleoatac.run_nuc import run_nuc
        print('---------Obtaining nucleosome signal and calling positions----------------------')
        run_nuc(args)
    elif call == "run":
        occ_args = parser.parse_args(map(str,['occ','--bed',args.bed,'--bam',args.bam,'--out',args.out,'--cores',args.cores]))
        vprocess_args = parser.parse_args(['vprocess','--isizes',args.out+'.nuc_dist.txt','--out',args.out])
        nuc_args_list = ['nuc','--bed',args.bed,'--bam',args.bam,'--out',args.out,'--cores', str(args.cores),
                                        '--occ_track', args.out + '.occ.bw','--vmat', args.out + '.VMat']
        if args.bias is not None:
            nuc_args_list.extend(['--bias', args.bias])
        elif args.gdna is not None:
            nuc_args_list.extend(['--gdna', args.gdna])
        if args.write_all:
            nuc_args_list.extend(['--write_all'])
        nuc_args = parser.parse_args(nuc_args_list)
        from nucleoatac.run_occ import run_occ
        from nucleoatac.run_vprocess import run_vprocess
        from nucleoatac.run_nuc import run_nuc
        print('---------Step1: Computing Occupancy and Nucleosomal Insert Distribution---------')
        run_occ(occ_args)
        print('---------Step2: Processing Vplot------------------------------------------------')
        run_vprocess(vprocess_args)
        print('---------Step3: Obtaining nucleosome signal and calling positions---------------')
        run_nuc(nuc_args)
    elif call == "vplot":
        from nucleoatac.make_vplot import make_vplot
        print('---------Making VPlot-----------------------------------------------------------')
        make_vplot(args)


def nucleoatac_parser():
    """Prepares argparse object

    """
    argparser = argparse.ArgumentParser(description = "%(prog)s -- Nucleosome Calling for ATAC-Seq",
                                        epilog = "For command line options for each command, type %(prog)s COMMAND -h")
    argparser.add_argument("--version", action="version", version="%(prog)s "+NUCLEOATAC_VERSION)
    subparsers = argparser.add_subparsers(dest = 'call' )

    add_run_parser( subparsers)

    add_occ_parser( subparsers)

    add_vprocess_parser( subparsers)

    add_nuc_parser( subparsers)

    add_vplot_parser( subparsers)


    return argparser

def add_occ_parser( subparsers):
    """Add argument parsers for the occ utility

    """
    parser = subparsers.add_parser("occ", help = "nucleoatac function:  Call nucleosome occupancy")
    group1 = parser.add_argument_group('Required', 'Necessary arguments')
    group1.add_argument('--bed', metavar='bed_file' , help = 'Peaks in bed format', required=True)
    group1.add_argument('--bam', metavar='bam_file',
                    help = 'Sorted (and indexed) BAM file', required=True)
    group1.add_argument('--out', metavar='basename',
                    help="give output basename", required=True)
    group2 = parser.add_argument_group('General Options', '')
    group2.add_argument('--write_peaks', action="store_true", default = False,
                    help ="write bed file of occupancy peaks")
    group2.add_argument('--cores', metavar = 'int',default=1,
                    help='Number of cores to use',type=int)
    group3 = parser.add_argument_group('Occupancy parameter', 'Change with caution')
    group3.add_argument('--lower',metavar="int",default=105,
    help="lower limit in insert size. default is 105",type=int)
    group3.add_argument('--upper',metavar="int",default=251,
    help="upper limit in insert size. default is 251",type=int)
    group3.add_argument('--flank',metavar="int",default=60,
    help="Distance on each side of dyad to include",type=int)
    group3.add_argument('--min_occ', metavar = "float", default=0.1,type=float,
                    help="Occupancy cutoff for determining nucleosome distribution. Default is 0.1")
    group3.add_argument('--nuc_sep',metavar='int',default=120,type=int,
        help = "minimum separation between occupany peaks")
    group3.add_argument('--reads', metavar = "int", default=1, type= int,
                    help="Reads cutoff for determining nucleosome distribution. Default is 1.")
    return

def add_vprocess_parser( subparsers):
    """Add argument parsers for the vprocess utility

    """
    parser = subparsers.add_parser("vprocess", help = "nucleoatac function:  Make processed vplot to use for nucleosome calling")
    group1 = parser.add_argument_group('Required', 'Necessary arguments')
    group1.add_argument('--out', metavar='output_basename',required=True)
    group2 = parser.add_argument_group('VPlot and Insert Size Options', 'Optional')
    group2.add_argument('--isizes', metavar='file' , help = 'Insert distribution file')
    group2.add_argument('--vplot', metavar='vmat_file',
                    help = 'Accepts VMat file.  Default is Vplot from S. Cer.')
    group3 = parser.add_argument_group('Size parameers', 'Use sensible values')
    group3.add_argument('--lower',metavar="int",default=105,
                    help="lower limit (inclusive) in insert size. default is 105",type=int)
    group3.add_argument('--upper',metavar="int",default=251,
                    help="upper limit (exclusive) in insert size. default 251",type=int)
    group3.add_argument('--flank',metavar="int",default=60,
                    help="distance on each side of dyad to include",type=int)
    group4 = parser.add_argument_group('Options', '')
    group4.add_argument('--smooth', metavar = "float", default = 0.75, type = float,
                    help="SD to use for gaussian smoothing.  Use 0 for no smoothing.")
    group4.add_argument('--plot_extra', action='store_true',default=False,
                    help="Make some additional plots")
    return

def add_nuc_parser( subparsers):
    """Add argument parsers for the nuc utility

    """
    parser = subparsers.add_parser("nuc", help = "nucleoatac function:  Call nucleosome positions and make signal tracks")
    group1 = parser.add_argument_group('Required', 'Necessary arguments')
    group1.add_argument('--bed', metavar='bed_file' , help = 'Regions for which \
        to do stuff.', required=True)
    group1.add_argument('--vmat', metavar='vdensity_file', help = "VMat object", required=True)
    group1.add_argument('--bam', metavar='bam_file',
                    help = 'Accepts sorted BAM file', required=True)
    group1.add_argument('--out', metavar='basename',
                    help="give output basename", required=True)
    group2 = parser.add_argument_group("Encouraged","Use only one of these options")
    group2.add_argument('--bias', metavar = 'bias_track',
                    help = 'Bigwig format')
    group2.add_argument('--gdna', metavar = 'gdna_track',
                    help = 'Bigwig format')
    group3 = parser.add_argument_group('General options', '')
    group3.add_argument('--cores', metavar = 'num_cores',default=1,
                    help='Number of cores to use',type=int)
    group3.add_argument('--write_all', action="store_true", default = False,
                    help="write all tracks")
    group3.add_argument('--occ_track', metavar='bw_track',
                    help = 'occupancy track. should be in bw file format. prevent re-calculation of occ if already calculated')
    group5 = parser.add_argument_group('Nucleosome/NFR calling parameters','Change with caution')
    group5.add_argument('--min_z', metavar='float', default = 3,
        help = 'Z-score threshold for nucleosome calls. Default is 3', type = float)
    group5.add_argument('--min_lr', metavar='float', default = 0,
        help = 'Log likelihood ratio threshold for nucleosome calls. Default is 0', type = float)
    group5.add_argument('--nuc_sep',metavar='int',default=120,type=int,
        help = "Minimum separation between non-redundant nucleosomes. Default is 120")
    group5.add_argument('--redundant_sep',metavar='int',default=25,type=int,
        help = "Minimum separation between redundant nucleosomes. Not recommended to be below 15. Default is 25")
    group5.add_argument('--sd',metavar='int', type=int,
        default=10, help = "Standard deviation for smoothing. Affect the \
        resolution at which nucleosomes can be positioned. Not recommended to \
        exceed 25 or to be smaller than 10. Default is 10" )
    group5.add_argument('--max_nfr_occ', metavar= 'float', default = 0.25,
        help = 'Maximum occupancy for NFR. Default is 0.25', type = float)
    group6 = parser.add_argument_group('Down-sampling option','Use only if downsampling desired')
    group6.add_argument('--seed', metavar = 'random_seed',type=int, default=500,
                    help='Random seed; only used if downsampling. Default is 500.')
    group6.add_argument('--downsample', metavar = 'downsample_ratio',
                     type = float, default=1,
                    help='Fraction of reads to use. Default is to use all reads (1).')
    return


def add_run_parser( subparsers):
    """Add argument parsers for the run utility

    """
    parser = subparsers.add_parser("run", help = "Main nucleoatac utility-- runs through occupancy determination & calling nuc positions")
    group1 = parser.add_argument_group('Required', 'Necessary arguments')
    group1.add_argument('--bed', metavar='bed_file' , help = 'Regions for which \
        to do stuff.', required=True)
    group1.add_argument('--bam', metavar='bam_file',
                    help = 'Accepts sorted BAM file', required=True)
    group1.add_argument('--out', metavar='output_basename',
                    help="give output basename", required=True)
    group2 = parser.add_argument_group("Encouraged","Use only one of these options")
    group2.add_argument('--bias', metavar = 'bias_track',
                    help = 'Bigwig format')
    group2.add_argument('--gdna', metavar = 'gdna_track',
                    help = 'Bigwig format')
    group3 = parser.add_argument_group('General options', '')
    group3.add_argument('--cores', metavar = 'num_cores',default=1,
                    help='Number of cores to use',type=int)
    group3.add_argument('--write_all', action="store_true", default = False,
                    help="write all tracks")
    return

def add_vplot_parser( subparsers):
    """Add argument parsers for the vplot utility

    """
    parser = subparsers.add_parser("vplot", help = "nucleoatac funcion-- make vplot")
    group1 = parser.add_argument_group('Required', 'Necessary arguments')
    group1.add_argument('--bed', metavar='bed_file' , help = 'Positions around which \
        to generate VPlot', required = True)
    group1.add_argument('--bam', metavar='bam_file', help = 'Accepts sorted BAM file',required=True)
    group1.add_argument('--out', metavar='basename', required=True)
    group2 = parser.add_argument_group('General options', '')
    group2.add_argument('--cores', metavar = 'int',default=1,help = "number of cores to use")
    group3 = parser.add_argument_group('VMat option', 'Size, scaling of VPlot')
    group3.add_argument('--lower',metavar="int", help = 'lower limit on insert \
        size',default=0,type=int)
    group3.add_argument('--upper', metavar="int",help="upper limit on insert \
        size",default=250,type=int)
    group3.add_argument('--flank', metavar="int",
        help="how many bases on each side of site (or center of site) to include",
        type=int,default=250)
    group3.add_argument('--scale', action="store_true", default = False)
    group3.add_argument('--weight',metavar="int",
        type=int,help="column in which weight information is included")
    group3.add_argument('--strand',metavar="int",
        type=int,help="column in which strand information is included")
    group3.add_argument('--not_atac', action="store_false", default = True, help = "Don't use atac offsets")
    return



if __name__ == '__main__':
    print "Command run:  "+ ' '.join(map(str,sys.argv))
    print "nucleoatac version "+NUCLEOATAC_VERSION
    print "start run at: " + time.strftime("%Y-%m-%d %H:%M")
    try:
        main()
        print "end run at: " + time.strftime("%Y-%m-%d %H:%M")
    except KeyboardInterrupt:
        sys.stderr.write("User interrupted nucleoatac.")
        sys.exit(0)


